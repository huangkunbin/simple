package simpleapi

import (
	"fmt"
	"simple/lib/mynet"
)

type Service interface {
	ServiceID() byte
	NewRequest(byte) Message
	NewResponse(byte) Message
	HandleRequest(*mynet.Session, Message)
}

type Message interface {
	ServiceID() byte
	MessageID() byte
	Identity() string
}

type EncodeError struct {
	Message interface{}
}

func (encodeError EncodeError) Error() string {
	return fmt.Sprintf("Encode Error: %v", encodeError.Message)
}

type DecodeError struct {
	Message interface{}
}

func (decodeError DecodeError) Error() string {
	return fmt.Sprintf("Decode Error: %v", decodeError.Message)
}

var appTemplate = `
// Code generated by simpleapi. DO NOT EDIT.
package {{Package}}

import (
	"simple/lib/mynet"
	"simple/lib/simpleapi"
)

{{range .Imports}}
import {{.Name}} "{{.Path}}"
{{end}}

{{range .Services}}

func (api *{{.Name}}) ServiceID() byte {
	return {{.ID}}
}

func (api *{{.Name}}) NewRequest(id byte) (simpleapi.Message) {
	switch id {
	{{range .Requests}}
	case {{.ID}}:
		return &{{.Name}}{}
	{{end}}
	}
	return nil
}

func (api *{{.Name}}) NewResponse(id byte) (simpleapi.Message) {
	switch id {
	{{range .Responses}}
	case {{.ID}}:
		return &{{.Name}}{}
	{{end}}
	}
	return nil
}

func (s *{{.Name}}) HandleRequest(session *mynet.Session, req simpleapi.Message) {
	switch req.MessageID() {
	{{range .Handlers}}
	case {{.ID}}:
		{{.InvokeCode}}
	{{end}}
	default:
		panic("Unhandled Message Type")
	}
}
{{end}}

{{range .Messages}}
func (msg *{{.Name}}) ServiceID() byte {
	return {{.Service.ID}}
}

func (msg *{{.Name}}) MessageID() byte {
	return {{.ID}}
}

func (msg *{{.Name}}) Identity() string {
	return "{{.Service.Name}}.{{.Name}}"
}
{{end}}
`
